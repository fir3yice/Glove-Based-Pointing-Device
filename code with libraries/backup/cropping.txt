#include "I2Cdev.h"
#include "MPU6050_6Axis_MotionApps612.h"
#include <MadgwickAHRS.h>

#if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
    #include "Wire.h"
#endif
#include <Mouse.h>
#include "Adafruit_HMC5883_U.h"

MPU6050 mpu;
Adafruit_HMC5883_Unified mag = Adafruit_HMC5883_Unified(12345);

#define INTERRUPT_PIN 2
#define TOUCH_LEFT 7   // TTP223B for Left Click
#define TOUCH_RIGHT 8  // TTP223B for Right Click
// #define TOUCH_MIDDLE 9 // TTP223B for Middle Click
#define LED_PIN 13    
#define IR_EMITTER_PIN 10

bool dmpReady = false;
uint8_t mpuIntStatus;
uint8_t devStatus;
uint16_t packetSize;
uint16_t fifoCount;
uint8_t fifoBuffer[64];

Quaternion q;
VectorFloat gravity;
float ypr[3] = {0, 0, 0};
float initial_values[7] = {0, 0, 0, 0, 0, 0, 0};
bool isMouseMovingPrev = false;
bool isMouseMoving = false;
unsigned long myTime;

volatile bool mpuInterrupt = false;
void dmpDataReady() {
    mpuInterrupt = true;
}

int mouseX = 720, mouseY = 450;
int screenWidth = 1440, screenHeight = 900;

void moveMouseToOrigin() {
    // Move mouse to upper-left corner (0,0)
    for (int i = 0; i < (screenWidth*2 / 127) + 1; i++) {
        Mouse.move(-127, 0, 0);
    }
    for (int i = 0; i < (screenHeight*2 / 127) + 1; i++) {
        Mouse.move(0, -127, 0);
    }
}

Madgwick filter;
const float sampleRate = 100.0; // 100 Hz

void setup() {
    Wire.begin();
    Wire.setClock(400000);
    Serial.begin(115200);
    delay(1000);
    Serial1.begin(9600);
    Mouse.begin();
    //Mouse.move(960 - mouseX, 540 - mouseY);
    //mouseX = 960;
    //mouseY = 540;
    filter.begin(sampleRate);
    moveMouseToOrigin();

    pinMode(TOUCH_LEFT, INPUT);
    pinMode(TOUCH_RIGHT, INPUT);
    pinMode(LED_PIN, OUTPUT);

    mpu.initialize();
    //Serial.println(mpu.testConnection() ? "MPU6050 connection successful" : "MPU6050 connection failed");

    devStatus = mpu.dmpInitialize();
    mpu.setXGyroOffset(220);
    mpu.setYGyroOffset(76);
    mpu.setZGyroOffset(-85);
    mpu.setZAccelOffset(1788);

    if (devStatus == 0) {
        mpu.CalibrateAccel(6);
        mpu.CalibrateGyro(6);
        mpu.setDMPEnabled(true);
        attachInterrupt(digitalPinToInterrupt(INTERRUPT_PIN), dmpDataReady, RISING);
        dmpReady = true;
        packetSize = mpu.dmpGetFIFOPacketSize();
    } else {
        //Serial.print("DMP Initialization failed (code ");
        //Serial.print(devStatus);
        //Serial.println(")");
    }

    // if (!mag.begin()) {
    //     //Serial.println("HMC5883L not detected!");
    // } else {
    //     //Serial.println("HMC5883L detected!");
    // }

    //do calibrations
    mpu.dmpGetQuaternion(&q, fifoBuffer);
    mpu.dmpGetGravity(&gravity, &q);
    mpu.dmpGetYawPitchRoll(ypr, &q, &gravity);
    initial_values[0] = ypr[0] * 180 / M_PI;
    initial_values[1] = ypr[1] * 180 / M_PI;
    initial_values[2] = ypr[2] * 180 / M_PI;
    sensors_event_t event;
    mag.getEvent(&event);
    initial_values[3] = event.magnetic.x;
    initial_values[4] = event.magnetic.y;
    initial_values[5] = event.magnetic.z;
    float heading = atan2(event.magnetic.y, event.magnetic.x);
    float declinationAngle = -0.0468;
    heading += declinationAngle;
    if (heading < 0) heading += 2 * PI;
    if (heading > 2 * PI) heading -= 2 * PI;
    initial_values[6] = heading;

    pinMode(IR_EMITTER_PIN, OUTPUT);
    digitalWrite(IR_EMITTER_PIN, HIGH);  // Always ON (emitting) (might change to make it dependent on the gyroscope angle or something?)
    Serial.println("Emitter on");
    myTime = millis();
}


int which_IR = -1;
unsigned long lastIRTime = 0;
bool IRActive = false;
unsigned long currTime;

int16_t accelX, accelY, accelZ;
int16_t gyroX, gyroY, gyroZ;
void loop() {
    if (!dmpReady) return;
    get_mag();
    mpu.getAcceleration(&accelX, &accelY, &accelZ);
    mpu.getRotation(&gyroX, &gyroY, &gyroZ);

    // Convert gyro to rad/s and accel to g (assuming 2g range, 250 deg/s)
    float gx = gyroX * DEG_TO_RAD / 131.0; // 131 LSB/Â°/s for 250 dps
    float gy = gyroY * DEG_TO_RAD / 131.0;
    float gz = gyroZ * DEG_TO_RAD / 131.0;

    float ax = accelX / 16384.0; // 16384 LSB/g for 2g
    float ay = accelY / 16384.0;
    float az = accelZ / 16384.0;

    // Feed data to Madgwick filter
    filter.update(gx, gy, gz, ax, ay, az, mag_xyz[0], mag_xyz[1], mag_xyz[2]);

    // Get filtered angles
    float roll = filter.getRoll();
    float pitch = filter.getPitch();
    float yaw = filter.getYaw();

    Serial.print("Roll: "); Serial.print(roll);
    Serial.print(" | Pitch: "); Serial.print(pitch);
    Serial.print(" | Yaw: "); Serial.println(yaw);



    if (Serial1.available()) {
        String input = Serial1.readStringUntil('\n');
        which_IR = input.toInt();
        
        if (which_IR >= 0) {
            isMouseMoving = true;
            snap_mouse(which_IR);
            IRActive = true;
            lastIRTime = millis();
        }
    }

    if (IRActive && millis() - lastIRTime < 1000) {
        return; 
    } else {
        IRActive = false;  
    }

    // Normal MPU-based movement
    
    // if (mpu.dmpGetCurrentFIFOPacket(fifoBuffer)) {
    //     mpu.dmpGetQuaternion(&q, fifoBuffer);
    //     mpu.dmpGetGravity(&gravity, &q);
    //     mpu.dmpGetYawPitchRoll(ypr, &q, &gravity);
        
    //     if (abs(ypr[1] * 180 / M_PI) < 3 * threshold) {
    //         isMouseMoving = true;
    //         moveMouse(ypr[0] * 180 / M_PI, ypr[2] * 180 / M_PI);
    //     }
    //     else{
    //       if(isMouseMoving == true){
    //         isMouseMoving = false;
    //       }
    //       else
    //         isMouseMovingPrev = false;
    //     }
    //     checkMouseClicks();
    // }
    // currTime = millis();
    // if( ((currTime-myTime) > 30000) && !isMouseMovingPrev && ( (abs(mag_xyz[0]-initial_values[3]) > 10) || (abs(mag_xyz[1]-initial_values[4]) > 7.5) )){
    //   myTime =  currTime;
    //   //recalibrate?
    // }
}


